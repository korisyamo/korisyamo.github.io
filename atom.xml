<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>第一口浮生茶</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-06T11:59:28.100Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>koris</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python基础</title>
    <link href="http://yoursite.com/2018/12/06/python%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/12/06/python基础/</id>
    <published>2018-12-06T11:17:20.000Z</published>
    <updated>2018-12-06T11:59:28.100Z</updated>
    
    <content type="html"><![CDATA[<p>#　python辅助工具　pycharm的安装</p><p>链接：<a href="https://blog.csdn.net/gaojinwei22/article/details/79699998" target="_blank" rel="noopener">https://blog.csdn.net/gaojinwei22/article/details/79699998</a></p><p>学生或者教师可以免费使用 不过每一年需要复审一次。需要自己的校内邮箱或者国际邮箱。</p><p>链接：<a href="https://blog.csdn.net/m0_37693335/article/details/81104408" target="_blank" rel="noopener">https://blog.csdn.net/m0_37693335/article/details/81104408</a></p><hr><h1 id="python基础语法用例-python-代码求list集合交并差、随机生成字符串"><a href="#python基础语法用例-python-代码求list集合交并差、随机生成字符串" class="headerlink" title="python基础语法用例　python 代码求list集合交并差、随机生成字符串"></a>python基础语法用例　python 代码求list集合交并差、随机生成字符串</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"> </span><br><span class="line">print(&quot;随机生成n个0-30随机数的数组：&quot;)</span><br><span class="line">def randlist(n):</span><br><span class="line">    return [random.randint(0,30) for i in range(n)]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def main():</span><br><span class="line">    a=randlist(10)</span><br><span class="line">    b=randlist(20)</span><br><span class="line"> </span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line"> </span><br><span class="line">    print(&quot;去重并集：&quot;)</span><br><span class="line">    c=list(set(a).union(set(b)))</span><br><span class="line">    print(c)</span><br><span class="line"> </span><br><span class="line">    print(&quot;去重交集：&quot;)</span><br><span class="line">    d=list(set(a).intersection(set(c)))</span><br><span class="line">    print(d)</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">main()</span><br><span class="line"> </span><br><span class="line">s=random.randint(65,90)</span><br><span class="line">r=chr(s)</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><hr><h1 id="python基础知识"><a href="#python基础知识" class="headerlink" title="python基础知识"></a>python基础知识</h1><h2 id="python-requests库的７个主要方法"><a href="#python-requests库的７个主要方法" class="headerlink" title="python requests库的７个主要方法"></a>python requests库的７个主要方法</h2><p><img src="https://img-blog.csdn.net/20181006135621655?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="image"><br>Request库的get（）方法：</p><p>最通常的方法是通过r=request.get（url）构造一个向服务器请求资源的url对象。</p><p>这个对象是Request库内部生成的。</p><p>这时候的r返回的是一个包含服务器资源的Response对象。包含从服务器返回的所有的相关资源。</p><p>url是什么？</p><p>url是通过http协议存取资源的一个路径，它就像我们电脑里面的一个文件的路径一样。</p><p>这个函数完整的使用方法有三个参数：<br><img src="https://img-blog.csdn.net/20181006140448129?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="image"></p><p><strong>其实也可以看它的源代码就可以发现 其实它是通过调用request方法来实现的。也就是说，Request库里面有7个常用方法，get只是其中一个，而除了里面的request方法，其他六个都是通过调用request方法来实现的，实际上都是request方法在实现。其他的类似的方法只是为了大家编写程序更方便。</strong></p><p>Request库的两个重要对象 :Response对象和Request对象。<br><img src="https://img-blog.csdn.net/20181006141233100?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="image"></p><p>Response对象常用的属性：<br><img src="https://img-blog.csdn.net/20181006141538847?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="image"></p><p>还有要注意分析网站的编码：<br><img src="https://img-blog.csdn.net/20181006142633106?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="image"></p><p>一个访问baidu的实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">print(&apos;访问baidu网站 获取Response对象&apos;)</span><br><span class="line">r = requests.get(&quot;http://www.baidu.com&quot;)</span><br><span class="line">print(r.status_code)</span><br><span class="line">print(r.encoding)</span><br><span class="line">print(r.apparent_encoding)</span><br><span class="line">print(&apos;将对象编码转换成UTF-8编码并打印出来&apos;)</span><br><span class="line">r.encoding = &apos;utf-8&apos;</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><p>输出为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">访问baidu网站 获取Response对象</span><br><span class="line">200</span><br><span class="line">ISO-8859-1</span><br><span class="line">utf-8</span><br><span class="line">将对象编码转换成UTF-8编码并打印出来</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet type=text/css href=http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css&gt;&lt;title&gt;百度一下，你就知道&lt;/title&gt;&lt;/head&gt; &lt;body link=#0000cc&gt; &lt;div id=wrapper&gt; &lt;div id=head&gt; &lt;div class=head_wrapper&gt; &lt;div class=s_form&gt; &lt;div class=s_form_wrapper&gt; &lt;div id=lg&gt; &lt;img hidefocus=true src=//www.baidu.com/img/bd_logo1.png width=270 height=129&gt; &lt;/div&gt; &lt;form id=form name=f action=//www.baidu.com/s class=fm&gt; &lt;input type=hidden name=bdorz_come value=1&gt; &lt;input type=hidden name=ie value=utf-8&gt; &lt;input type=hidden name=f value=8&gt; &lt;input type=hidden name=rsv_bp value=1&gt; &lt;input type=hidden name=rsv_idx value=1&gt; &lt;input type=hidden name=tn value=baidu&gt;&lt;span class=&quot;bg s_ipt_wr&quot;&gt;&lt;input id=kw name=wd class=s_ipt value maxlength=255 autocomplete=off autofocus&gt;&lt;/span&gt;&lt;span class=&quot;bg s_btn_wr&quot;&gt;&lt;input type=submit id=su value=百度一下 class=&quot;bg s_btn&quot;&gt;&lt;/span&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=u1&gt; &lt;a href=http://news.baidu.com name=tj_trnews class=mnav&gt;新闻&lt;/a&gt; &lt;a href=http://www.hao123.com name=tj_trhao123 class=mnav&gt;hao123&lt;/a&gt; &lt;a href=http://map.baidu.com name=tj_trmap class=mnav&gt;地图&lt;/a&gt; &lt;a href=http://v.baidu.com name=tj_trvideo class=mnav&gt;视频&lt;/a&gt; &lt;a href=http://tieba.baidu.com name=tj_trtieba class=mnav&gt;贴吧&lt;/a&gt; &lt;noscript&gt; &lt;a href=http://www.baidu.com/bdorz/login.gif?login&amp;amp;tpl=mn&amp;amp;u=http%3A%2F%2Fwww.baidu.com%2f%3fbdorz_come%3d1 name=tj_login class=lb&gt;登录&lt;/a&gt; &lt;/noscript&gt; &lt;script&gt;document.write(&apos;&lt;a href=&quot;http://www.baidu.com/bdorz/login.gif?login&amp;tpl=mn&amp;u=&apos;+ encodeURIComponent(window.location.href+ (window.location.search === &quot;&quot; ? &quot;?&quot; : &quot;&amp;&quot;)+ &quot;bdorz_come=1&quot;)+ &apos;&quot; name=&quot;tj_login&quot; class=&quot;lb&quot;&gt;登录&lt;/a&gt;&apos;);&lt;/script&gt; &lt;a href=//www.baidu.com/more/ name=tj_briicon class=bri style=&quot;display: block;&quot;&gt;更多产品&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=ftCon&gt; &lt;div id=ftConw&gt; &lt;p id=lh&gt; &lt;a href=http://home.baidu.com&gt;关于百度&lt;/a&gt; &lt;a href=http://ir.baidu.com&gt;About Baidu&lt;/a&gt; &lt;/p&gt; &lt;p id=cp&gt;&amp;copy;2017&amp;nbsp;Baidu&amp;nbsp;&lt;a href=http://www.baidu.com/duty/&gt;使用百度前必读&lt;/a&gt;&amp;nbsp; &lt;a href=http://jianyi.baidu.com/ class=cp-feedback&gt;意见反馈&lt;/a&gt;&amp;nbsp;京ICP证030173号&amp;nbsp; &lt;img src=//www.baidu.com/img/gs.gif&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;</span><br></pre></td></tr></table></figure></p><hr><h2 id="python网络爬虫的Robots协议"><a href="#python网络爬虫的Robots协议" class="headerlink" title="python网络爬虫的Ｒobots协议"></a>python网络爬虫的Ｒobots协议</h2><p>网络爬虫的尺寸大致分为3种：<br><img src="https://img-blog.csdn.net/20181007122204577?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="image"></p><p>而第一种大致占到了90%。由于网络爬虫的存在，服务器会因为网络爬虫造成很大的资源开销，比如一个普通人一定时间内访问上十次，而爬虫可能会访问十万次或者百万次。如果一个服务器性能较差，可能会承受不来这个规模的访问。因此网络上对爬虫有一定的制约，对于一些不友好的爬虫，甚至可能会涉及到触犯到法律。</p><p>现在一般的网站都会对爬虫做出限制，大致分为两种：<br><img src="https://img-blog.csdn.net/20181007122723114?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="iamge"></p><p>现在说一下第二种，Robots（Robots Exclusion Standard ）协议，也叫机器人协议。</p><p>作用：告知爬虫网页上哪些内容可以爬取，哪些不行。</p><p>形式：在网站根目录下放置robots.txt文件。</p><p>比如我们用代码去获取京东的robots协议：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import  requests</span><br><span class="line"> </span><br><span class="line">def getHTTPXML( url ):</span><br><span class="line">    try:</span><br><span class="line">        r = requests.get(url, timeout = 30)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        return r.text</span><br><span class="line">    except:</span><br><span class="line">        return &quot;产生异常&quot;</span><br><span class="line"> </span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    url = &quot;http://www.jd.com/robots.txt&quot;</span><br><span class="line">    print(getHTTPXML(url))</span><br></pre></td></tr></table></figure></p><p>爬取下来的robots协议为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">User-agent: * </span><br><span class="line">Disallow: /?* </span><br><span class="line">Disallow: /pop/*.html </span><br><span class="line">Disallow: /pinpai/*.html?* </span><br><span class="line">User-agent: EtaoSpider </span><br><span class="line">Disallow: / </span><br><span class="line">User-agent: HuihuiSpider </span><br><span class="line">Disallow: / </span><br><span class="line">User-agent: GwdangSpider </span><br><span class="line">Disallow: / </span><br><span class="line">User-agent: WochachaSpider </span><br><span class="line">Disallow: /</span><br></pre></td></tr></table></figure></p><p><strong>它是什么意思呢，我们来分析一下。</strong></p><p>第一行*表示所有的，也就是说，对于所有的网络爬虫，它都定义为User-agent </p><p>意思就是说对于所有的网络爬虫，都应该遵守这个协议。</p><p>第二行什么意思呢？disallow表示不允许，？后面是*，表示？后面所有的东西，也就是说，它不允许任何爬虫访问任何以？开头的路径。</p><p>第三行表示任何爬虫都不允许访问pop/开头的路径。</p><p>第四行同理，符合这类的路径也不允许访问。</p><p>后面的又写了四个爬虫，EtaoSpider等等</p><p>他们被禁止的是根目录。这四种爬虫不允许爬取京东的任何资源。</p><p>也就是说这四种爬虫被京东定义为恶意爬虫，非法的获取过京东的资源，所以京东不允许这四类爬虫获取京东的任何资源了。</p><p>对于不遵守robots协议的爬虫，可能会存在法律风险。</p><hr><p>所以大家也看到了，robots协议就是通过User-agent 和 disallow这两个基本语法来告知所有爬虫它内部能访问的权限。</p><p>有了这个的话，就相当于告知所有爬虫应该去遵守这个网站的规范，相当于制定了一个准则。</p><p>不同的网站会有不同的robots协议，我们也可以看看其他网站的robots协议。</p><p>来看一下百度的robots协议：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">User-agent: Baiduspider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line"> </span><br><span class="line">User-agent: Googlebot</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line"> </span><br><span class="line">User-agent: MSNBot</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line"> </span><br><span class="line">User-agent: Baiduspider-image</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line"> </span><br><span class="line">User-agent: YoudaoBot</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line"> </span><br><span class="line">User-agent: Sogou web spider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line"> </span><br><span class="line">User-agent: Sogou inst spider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line"> </span><br><span class="line">User-agent: Sogou spider2</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line"> </span><br><span class="line">User-agent: Sogou blog</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line"> </span><br><span class="line">User-agent: Sogou News Spider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line"> </span><br><span class="line">User-agent: Sogou Orion spider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line"> </span><br><span class="line">User-agent: ChinasoSpider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line"> </span><br><span class="line">User-agent: Sosospider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">User-agent: yisouspider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line"> </span><br><span class="line">User-agent: EasouSpider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line"> </span><br><span class="line">User-agent: *</span><br><span class="line">Disallow: /</span><br></pre></td></tr></table></figure></p><p>qq的robots协议：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow:  </span><br><span class="line">Sitemap: http://www.qq.com/sitemap_index.xml</span><br></pre></td></tr></table></figure></p><p>新浪新闻的robots协议：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /wap/</span><br><span class="line">Disallow: /iframe/</span><br><span class="line">Disallow: /temp/</span><br></pre></td></tr></table></figure></p><p><strong>不是所有网站都有robots协议，比如国家教育部的网站就没有robots协议，它就默认为所有网络爬虫都可以无限制的去爬取这个网站。</strong></p><hr><h2 id="python学习使用正则表达式-re库"><a href="#python学习使用正则表达式-re库" class="headerlink" title="python学习使用正则表达式(re库)"></a>python学习使用正则表达式(re库)</h2><p><strong>re库是python中自带的一个库，不需要外部导入。</strong></p><p><strong>它主要是支持正则表达式匹配。</strong></p><p>下面来说一下其主要功能函数：</p><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">re.search()</td><td style="text-align:center">在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象。</td></tr><tr><td style="text-align:center">re.match()</td><td style="text-align:center">在一个字符串的开始位置起匹配表达式，返回match对象</td></tr><tr><td style="text-align:center">re.findall()</td><td style="text-align:center">搜索字符串，以列表类型返回全部能匹配的子串</td></tr><tr><td style="text-align:center">re.split()</td><td style="text-align:center">将一个字符串按照正则表达式的匹配结果进行分割，返回列表类型</td></tr><tr><td style="text-align:center">re.finditer()</td><td style="text-align:center">搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</td></tr><tr><td style="text-align:center">re.sub()</td><td style="text-align:center">在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td></tr></tbody></table><p>正则表达式使用标记：</p><table><thead><tr><th style="text-align:center">常用标记</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">re.I  re.IGNORECASE</td><td style="text-align:center">忽略正则表达式的大小写 【A-Z】能够匹配小写字符</td></tr><tr><td style="text-align:center">re.M re.MULITILINE</td><td style="text-align:center">正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</td></tr><tr><td style="text-align:center">re.S re.DOTALL</td><td style="text-align:center">正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">match = re.search(r&apos;[1-9]\d&#123;5&#125;&apos;,&apos;BIT 100081&apos;)</span><br><span class="line">if match:</span><br><span class="line">    print(match.group(0))</span><br><span class="line"></span><br><span class="line">match2 = re.match(r&apos;[1-9]\d&#123;5&#125;&apos;,&apos;100081 BIT&apos;)</span><br><span class="line">if match2:</span><br><span class="line">    print(match2.group(0))</span><br><span class="line"></span><br><span class="line">match3 = re.match(r&apos;[1-9]\d&#123;5&#125;&apos;, &apos;BIT 100081&apos;)</span><br><span class="line">if match3:</span><br><span class="line">    print(match3.group(0))</span><br></pre></td></tr></table></figure><p>返回结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">100081</span><br><span class="line">100081</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p><p>第三个不返回 结果 因为他是从第一个开始匹配 很明显第一个字母B和它的正则表达式不匹配，所以结果为空，那么if判断之后 将不会输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">ls = re.findall(r&apos;[1-9]\d&#123;5&#125;&apos;, &apos;BIT100081 FSABIT100085&apos;)</span><br><span class="line">if ls:</span><br><span class="line">    print(ls)</span><br><span class="line"></span><br><span class="line">ls = re.split(r&apos;[1-9]\d&#123;5&#125;&apos;, &apos;BIT100081 FSABIT100085&apos;)</span><br><span class="line">if ls:</span><br><span class="line">    print(ls)</span><br><span class="line">ls = re.split(r&apos;[1-9]\d&#123;5&#125;&apos;, &apos;BIT100081 FSABIT100085&apos;,maxsplit=1)</span><br><span class="line">if ls:</span><br><span class="line">    print(ls)</span><br><span class="line"></span><br><span class="line">for m in re.finditer(r&apos;[1-9]\d&#123;5&#125;&apos;,&apos;BIT100081 FSABIT100085&apos;):</span><br><span class="line">    if m:</span><br><span class="line">        print(m.group(0))</span><br><span class="line"></span><br><span class="line">ls = re.sub(r&apos;[1-9]\d&#123;5&#125;&apos;, &apos;:zipcode&apos;, &apos;BIT100081 FSABIT100085&apos;)</span><br><span class="line">print(ls)</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[&apos;100081&apos;, &apos;100085&apos;]</span><br><span class="line">[&apos;BIT&apos;, &apos; FSABIT&apos;, &apos;&apos;]</span><br><span class="line">[&apos;BIT&apos;, &apos; FSABIT100085&apos;]</span><br><span class="line">100081</span><br><span class="line">100085</span><br><span class="line">BIT:zipcode FSABIT:zipcode</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p><hr><h2 id="python理解beautiful-soup库的基本元素"><a href="#python理解beautiful-soup库的基本元素" class="headerlink" title="python理解beautiful soup库的基本元素"></a>python理解beautiful soup库的基本元素</h2><p>理解Beautiful Soup的基本元素是理解Beautiful Soup库的基础。</p><p>首先我们说明一下Beautiful Soup库能干什么。</p><p>我们以打开html文件为例。</p><p>任何一组html文件它都是以尖括号为组的标签组织起来的。而这些标签建立起来的东西我们称之为标签树。</p><p>而Beautiful Soup库是解析，遍历，维护标签树的功能库。</p><p>标签的具体格式如图：<br><img src="https://img-blog.csdn.net/20181011190823135?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="iamge"></p><p>Beautiful Soup库常见的四种解析器：<br><img src="https://img-blog.csdn.net/20181011191521993?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="image"></p><p>现在我们来介绍一下Beautiful Soup库的基本元素：<br><img src="https://img-blog.csdn.net/20181011192104933?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="iamge"></p><p>下面我们来介绍一下获得tag标签的相关方法</p><p>任何语法标签都可以用soup.tag方法访问获得，比如我们要获取某个界面的a标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">r = requests.get(&quot;http://python123.io/ws/demo.html&quot;)</span><br><span class="line">demo = r.text</span><br><span class="line">from bs4 import  BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo, &quot;html.parser&quot;)</span><br><span class="line">tag = soup.a</span><br><span class="line">print(tag)</span><br></pre></td></tr></table></figure></p><p>输出为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=&quot;py1&quot; href=&quot;http://www.icourse163.org/course/BIT-268001&quot; id=&quot;link1&quot;&gt;Basic Python&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>但是当存在多个标签的时候，我们用soup.tag只能返回其中第一个。</p><p>name表示获取相关标签的名字，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">r = requests.get(&quot;http://python123.io/ws/demo.html&quot;)</span><br><span class="line">demo = r.text</span><br><span class="line">from bs4 import  BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo, &quot;html.parser&quot;)</span><br><span class="line">print(soup.a.parent.name)</span><br><span class="line">print(soup.a.parent.parent.name)</span><br></pre></td></tr></table></figure></p><p>输出为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p</span><br><span class="line">body</span><br></pre></td></tr></table></figure></p><hr><h2 id="python实现多线程并发执行-join函数"><a href="#python实现多线程并发执行-join函数" class="headerlink" title="python实现多线程并发执行(join函数)"></a>python实现多线程并发执行(join函数)</h2><p>主线程启动一个子线程t并等到t线程结束后才执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"> </span><br><span class="line">def reading():</span><br><span class="line">    for i in range(5):</span><br><span class="line">        print(&quot;reading&quot;, i)</span><br><span class="line">        time.sleep(1)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">t = threading.Thread(target = reading)</span><br><span class="line">t.setDaemon(True)</span><br><span class="line">t.start()</span><br><span class="line">t.join()</span><br><span class="line">print(&quot;The End&quot;)</span><br></pre></td></tr></table></figure></p><p>运行结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">reading 0</span><br><span class="line">reading 1</span><br><span class="line">reading 2</span><br><span class="line">reading 3</span><br><span class="line">reading 4</span><br><span class="line">The End</span><br></pre></td></tr></table></figure></p><p>由此可见主线程启动子线程t执行reading函数 t.join阻塞主线程，一直等到t线程执行完毕后才结束t线程结束才执行主线程输出the end。</p><p>在子线程启动另外一个子线程，并等待子线程结束后才继续执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"> </span><br><span class="line">def reading():</span><br><span class="line">    for i in range(5):</span><br><span class="line">        print(&quot;reading&quot;, i)</span><br><span class="line">        time.sleep(1)</span><br><span class="line"> </span><br><span class="line">def test():</span><br><span class="line">    r = threading.Thread(target=reading)</span><br><span class="line">    r.setDaemon(True)</span><br><span class="line">    r.start()</span><br><span class="line">    r.join()</span><br><span class="line">    print(&quot;test end&quot;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">t = threading.Thread(target = test)</span><br><span class="line">t.setDaemon(True)</span><br><span class="line">t.start()</span><br><span class="line">t.join()</span><br><span class="line">print(&quot;The End&quot;)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">reading 0</span><br><span class="line">reading 1</span><br><span class="line">reading 2</span><br><span class="line">reading 3</span><br><span class="line">reading 4</span><br><span class="line">test end</span><br><span class="line">The End</span><br></pre></td></tr></table></figure></p><p>由此可见主线程启动t线程后t.join会等待t线程结束，在test中再次启动r子线程，r子线程加入r.join而阻塞t线程，知道r进程结束，然后才显示test end，然后t线程结束再次结束t.join。主线程显示The End 结束。</p><h1 id="python爬虫实例"><a href="#python爬虫实例" class="headerlink" title="python爬虫实例"></a>python爬虫实例</h1><h2 id="python简单爬取网页的通用代码框架"><a href="#python简单爬取网页的通用代码框架" class="headerlink" title="python简单爬取网页的通用代码框架"></a>python简单爬取网页的通用代码框架</h2><p>爬取网页的通用代码框架就是一组代码</p><p>它可以准确的 可靠的爬取网页上的内容。</p><p>但是这样的语句不是一定成立的，因为网络连接有风险。</p><p>常见的异常有：<br><img src="https://img-blog.csdn.net/20181006145928788?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="image"></p><p>而raise_for_status方法可以返回所引发的httperror异常。</p><p>爬取网页的框架代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">def getHTMLText(url):</span><br><span class="line">    try:</span><br><span class="line">        r = requests.get(url, timeout=30)</span><br><span class="line">        r.raise_for_status()  #如果状态不是200 引发http error异常</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        return r.text</span><br><span class="line">    except:</span><br><span class="line">        return &quot;产生异常&quot;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    url = &quot;http://www.baidu.com&quot;</span><br><span class="line">    print(getHTMLText(url))</span><br></pre></td></tr></table></figure></p><h2 id="python简单图片爬取框架"><a href="#python简单图片爬取框架" class="headerlink" title="python简单图片爬取框架"></a>python简单图片爬取框架</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import os</span><br><span class="line">url = &quot;http://image.nationalgeographic.com.cn/2017/0211/20170211061910157.jpg&quot;</span><br><span class="line">root = &quot;D://pics//&quot;</span><br><span class="line">path = root + url.split(&apos;/&apos;)[-1]</span><br><span class="line">try:</span><br><span class="line">    if not os.path.exists(root):</span><br><span class="line">        os.mkdir(root)</span><br><span class="line">    if not os.path.exists(path):</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        with open(path, &apos;wb&apos;) as f:</span><br><span class="line">            f.write(r.content)</span><br><span class="line">            f.close()</span><br><span class="line">            print(&quot;文件保存成功&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;文件已经存在&quot;)</span><br><span class="line">except:</span><br><span class="line">    print(&quot;爬取失败&quot;)</span><br></pre></td></tr></table></figure><h2 id="python爬取中国大学排名"><a href="#python爬取中国大学排名" class="headerlink" title="python爬取中国大学排名"></a>python爬取中国大学排名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import bs4</span><br><span class="line">def gegHTMLText(url):</span><br><span class="line">    try:</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        return r.text</span><br><span class="line">    except:</span><br><span class="line">        return &quot;&quot;</span><br><span class="line"> </span><br><span class="line">def fillUnivList(ulist,html):</span><br><span class="line">    soup = BeautifulSoup(html, &quot;html.parser&quot;)</span><br><span class="line">    for tr in soup.find(&apos;tbody&apos;).children: #采用循环查找html文本中的tbody标签并且将它的孩子children做一个遍历</span><br><span class="line">        if isinstance(tr, bs4.element.Tag): #检测tr标签的标签类型 如果不是bs4库里面定义的Tag类型 则过滤掉</span><br><span class="line">            tds = tr(&apos;td&apos;)</span><br><span class="line">            ulist.append([tds[0].string, tds[1].string, tds[2].string])</span><br><span class="line"> </span><br><span class="line">def printUnivList(ulist,num):</span><br><span class="line">    print(&quot;&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;&quot;.format(&quot;排名&quot;, &quot;学校&quot;, &quot;分数&quot;)) #表头信息的打印</span><br><span class="line">    for i in range(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        print(&quot;&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;&quot;.format(u[0], u[1], u[2]))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def main():</span><br><span class="line">    uinfo = []</span><br><span class="line">    url = &quot;http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html&quot;</span><br><span class="line">    html = gegHTMLText(url)</span><br><span class="line">    fillUnivList(uinfo, html)</span><br><span class="line">    printUnivList(uinfo, 20)</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="python爬取豆瓣影评"><a href="#python爬取豆瓣影评" class="headerlink" title="python爬取豆瓣影评"></a>python爬取豆瓣影评</h2><p>看的别人的代码 爬取某部影片的影评 没有模拟登录只能爬6页<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"># -*- encoding:utf-8 -*-</span><br><span class="line"> </span><br><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import re</span><br><span class="line">import random</span><br><span class="line">import  io</span><br><span class="line">import  sys</span><br><span class="line">import time</span><br><span class="line"> </span><br><span class="line"># 使用session来保存登陆信息</span><br><span class="line">s = requests.session()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 获取动态ip，防止ip被封</span><br><span class="line">def get_ip_list(url, headers):</span><br><span class="line">    web_data = requests.get(url, headers=headers)</span><br><span class="line">    soup = BeautifulSoup(web_data.text, &apos;lxml&apos;)</span><br><span class="line">    ips = soup.find_all(&apos;tr&apos;)</span><br><span class="line">    ip_list = []</span><br><span class="line">    for i in range(1, len(ips)):</span><br><span class="line">        ip_info = ips[i]</span><br><span class="line">        tds = ip_info.find_all(&apos;td&apos;)</span><br><span class="line">        ip_list.append(tds[1].text + &apos;:&apos; + tds[2].text)</span><br><span class="line">    return ip_list</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 随机从动态ip链表中选择一条ip</span><br><span class="line">def get_random_ip(ip_list):</span><br><span class="line">    proxy_list = []</span><br><span class="line">    for ip in ip_list:</span><br><span class="line">        proxy_list.append(&apos;http://&apos; + ip)</span><br><span class="line">    proxy_ip = random.choice(proxy_list)</span><br><span class="line">    proxies = &#123;&apos;http&apos;: proxy_ip&#125;</span><br><span class="line">    return proxies</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 获取评论内容和下一页链接</span><br><span class="line">def get_data(html):</span><br><span class="line">    soup = BeautifulSoup(html, &quot;lxml&quot;)</span><br><span class="line">    comment_list = soup.select(&apos;.comment &gt; p&apos;)</span><br><span class="line">    next_page = soup.select(&apos;.next&apos;)[0].get(&apos;href&apos;)</span><br><span class="line">    return comment_list, next_page</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding=&apos;utf8&apos;)</span><br><span class="line">    absolute = &apos;https://movie.douban.com/subject/26322642/comments&apos;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.89 Safari/537.36&apos;&#125;</span><br><span class="line">    loginUrl = &apos;https://www.douban.com/accounts/login?source=movie&apos;</span><br><span class="line">    formData = &#123;</span><br><span class="line">        &quot;redir&quot;: &quot;https://movie.douban.com/subject/26322642/comments?start=201&amp;limit=20&amp;sort=new_score&amp;status=P&amp;percent_type=&quot;,</span><br><span class="line">        &quot;form_email&quot;: &quot;www.1239198605@qq.com&quot;,</span><br><span class="line">        &quot;form_password&quot;: &quot;yyf15997588668&quot;,</span><br><span class="line">        &quot;login&quot;: u&apos;登录&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    # 获取动态ip</span><br><span class="line">    url = &apos;http://www.xicidaili.com/nn/&apos;</span><br><span class="line">    ip_list = get_ip_list(url, headers=headers)</span><br><span class="line">    proxies = get_random_ip(ip_list)</span><br><span class="line"> </span><br><span class="line">    current_page = absolute</span><br><span class="line">    next_page = &quot;&quot;</span><br><span class="line">    comment_list = []</span><br><span class="line">    temp_list = []</span><br><span class="line">    num = 0</span><br><span class="line">    ans = 0</span><br><span class="line">    while (1):</span><br><span class="line">        ans+=1</span><br><span class="line">        print(&quot;爬取第&quot; + str(ans) + &quot;页&quot;)</span><br><span class="line">        time.sleep(5)</span><br><span class="line">        html = s.get(current_page,  headers=headers, proxies=proxies).content</span><br><span class="line">        temp_list, next_page = get_data(html)</span><br><span class="line"> </span><br><span class="line">        if ans is 7:</span><br><span class="line">            break</span><br><span class="line">        current_page = absolute + next_page</span><br><span class="line">        comment_list = comment_list + temp_list</span><br><span class="line">        # time.sleep(1 + float(random.randint(1, 100)) / 20)</span><br><span class="line">        num = num + 1</span><br><span class="line">        # 每20次更新一次ip</span><br><span class="line">        if num % 20 == 0:</span><br><span class="line">            proxies = get_random_ip(ip_list)</span><br><span class="line">        print(current_page)</span><br><span class="line">        # 将爬取的评论写入txt文件中</span><br><span class="line">        with open(&quot;F:\comments.txt&quot;, &apos;a&apos;)as f:</span><br><span class="line">            ark = 0</span><br><span class="line">            for node in comment_list:</span><br><span class="line">                comment = node.get_text().strip().replace(&quot;\n&quot;, &quot;&quot;)</span><br><span class="line">                f.write(comment + &quot;\n&quot;)</span><br><span class="line">                ark += 1</span><br><span class="line">                print(&quot;写了&quot; + str(ark) + &quot;个&quot;)</span><br><span class="line">            f.close()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#　python辅助工具　pycharm的安装&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://blog.csdn.net/gaojinwei22/article/details/79699998&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;htt
      
    
    </summary>
    
      <category term="python爬虫" scheme="http://yoursite.com/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python爬虫" scheme="http://yoursite.com/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>JDBC使用原理及使用Statement访问数据库</title>
    <link href="http://yoursite.com/2018/10/23/JDBC%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8Statement%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2018/10/23/JDBC使用原理及使用Statement访问数据库/</id>
    <published>2018-10-23T12:42:56.000Z</published>
    <updated>2018-10-28T03:53:18.540Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JDBC：Java DataBase Connectivity</strong><br><strong>作用：可以为多种关系型数据库DBMS 提供统一的访问方式</strong><br><strong>目的：用Java来操作数据库</strong></p><p>1.JDBC API：提供各种操作的访问接口，Connection Statement PreparedStatement ResultSet<br>2.JDBC DriverManager：管理不同的数据库驱动<br>3.各种数据库驱动：相应数据库厂商提供的（第三方公司提供），连接\直接操作数据库</p><p><strong>JDBC功能：</strong><br>具体是通过以下类/接口实现：<br>DriverManager：管理jdbc驱动<br>Connection：连接<br>Statement（PrepareStatement）：增删改查<br>CallableStatement：调用数据库中的存储过程/存储函数<br>Result：返回的结果集</p><p><strong>JDBC访问数据库的具体步骤：</strong><br>a.导入驱动，加载具体的驱动类。<br>b.与数据库建立连接<br>c.发送sql，执行<br>d.处理结果集(查询)</p><p><strong>数据库驱动：</strong><br>||驱动jar|具体驱动类|连接字符串|<br>|:–:|:–:|:–:|<br>|oracle|ojdbc-x.jar|oracle.jdbc.OracleDriver|<br>|MySQL|mysql-connector-java-x.jar|com.mysql.jdbc.Driver|<br>|sqlServer|sql jdbc-x.jar|com.microsoft.sqlserver.jdbc.SQLServerDriver|</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;JDBC：Java DataBase Connectivity&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;作用：可以为多种关系型数据库DBMS 提供统一的访问方式&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;目的：用Java来操作数据库&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>session执行机制</title>
    <link href="http://yoursite.com/2018/10/21/session%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/10/21/session执行机制/</id>
    <published>2018-10-21T06:56:17.000Z</published>
    <updated>2018-10-22T07:44:44.943Z</updated>
    
    <content type="html"><![CDATA[<p><strong>session：会话</strong><br>什么叫一次会话？<br>浏览网站： 开始-关闭<br>购物： 浏览-付款-退出<br>电子邮件：浏览-写邮件-退出</p><p>一次开始到一次结束的过程叫一次会话</p><p>session机制:<br>客户端第一次请求服务端时，（jsessionid-sessionid匹配，不过第一次肯定是不成功的，jsessionid根本就没有）服务端会产生一个session对象（用于保存该客户的信息）;并且每个session对象 都会有一个唯一的sessionId(用于区分其他session);<br>服务端又会产生一个cookie，并且该cookie的name=JSESSIONID，value=服务端sessionID的值；然后 服务端会在 响应客户端的同时 将该cookie发送给客户端，至此 客户端就有了 一个cookie（JSESSIONID）；因此，客户端的cookie就可以和服务端的session一一对应（JSESSION–sessionID）</p><p>客户端第二/n次请求服务端时，服务端会先用客户端cookie中的JSESSIONID 去服务端的sesssion中匹配sessionid，如果匹配成功，说明此用户不是第一次访问；就无需登录。</p><p>举个形象一点例子：<br>客户端：顾客<br>服务端：存包处   商场</p><p>顾客第一次存包：<br>商场判断此人是否之前已经存过包（通过你手里是否有钥匙）<br>如果是新顾客（没钥匙） 会分配给一个钥匙给该顾客；钥匙会和柜子一一对应<br>第二/n次存包：商场判断此人是否之前已经存过包（通过你手里是否有钥匙）<br>如果是老顾客，则不需要分配；故顾客手里的钥匙和柜子自动一一对应。</p><hr><p><strong>session:</strong><br><strong>1.session是存储在服务端的</strong><br><strong>2.session是在同一个用户（客户）请求时 共享</strong><br><strong>3.实现机制：第一次客户请求时，产生一个sessionid并复制给cookie的jsessionid 然后发给客户端。最终通过sessionid和用户发过来的jssessionid实现一一对应机制。</strong></p><hr><p><strong>session方法:</strong><br>1.String  getId（）：获取sessionId<br>2.boolean isNew（）：判断是否是新用户（第一次访问）<br>3.void invalidate（）：使session失效（退出登录 注销）<br>4.void setAttribute(),Object getAttribute();<br>5.void setMaxInactiveInterval(秒)：设置最大有效 非活动时间<br>6.int getMaxInactiveInterval(秒)：获取最大有效 非活动时间</p><p>示例：</p><p><strong>登录功能</strong></p><p>loginin.jsp还是和原来一样  正常的登录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;form action= &quot;check.jsp&quot; method=&quot;post&quot;&gt;</span><br><span class="line">   </span><br><span class="line">   用户名：&lt;input type=&quot;text&quot; name=&quot;uname&quot;&gt;&lt;br/&gt;</span><br><span class="line">   密码：&lt;input type=&quot;password&quot; name=&quot;upwd&quot;&gt;&lt;br/&gt;</span><br><span class="line">   &lt;input type=&quot;submit&quot; value = &quot;登陆&quot;&gt;&lt;br/&gt;</span><br><span class="line">   </span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>check.jsp:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">String name = request.getParameter(&quot;uname&quot;);</span><br><span class="line">String pwd = request.getParameter(&quot;upwd&quot;);</span><br><span class="line">if(name.equals(&quot;zs&quot;)&amp;&amp;pwd.equals(&quot;abc&quot;))&#123;</span><br><span class="line">//只有登录成功 session中才会存在uname/upwd</span><br><span class="line">session.setAttribute(&quot;uname&quot;, name);</span><br><span class="line">session.setAttribute(&quot;upwd&quot;, pwd);</span><br><span class="line">session.setMaxInactiveInterval(10);</span><br><span class="line">request.getRequestDispatcher(&quot;welcome.jsp&quot;).forward(request, response);</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line">//登陆失败</span><br><span class="line">response.sendRedirect(&quot;loginin.jsp&quot;);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>welcome.jsp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">欢迎您：</span><br><span class="line">&lt;%</span><br><span class="line">String name = (String)session.getAttribute(&quot;uname&quot;);</span><br><span class="line"></span><br><span class="line">//如果用户没有登录 而是直接通过地址来访问welcome.jsp 则必然或渠道的name是null 跳回登录页</span><br><span class="line">if(name!=null)</span><br><span class="line">&#123;</span><br><span class="line">out.print(name);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">response.sendRedirect(&quot;loginin.jsp&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;session：会话&lt;/strong&gt;&lt;br&gt;什么叫一次会话？&lt;br&gt;浏览网站： 开始-关闭&lt;br&gt;购物： 浏览-付款-退出&lt;br&gt;电子邮件：浏览-写邮件-退出&lt;/p&gt;
&lt;p&gt;一次开始到一次结束的过程叫一次会话&lt;/p&gt;
&lt;p&gt;session机制:&lt;br&gt;客户
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>response、请求转发和重定向</title>
    <link href="http://yoursite.com/2018/10/18/response%E3%80%81%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>http://yoursite.com/2018/10/18/response、请求转发和重定向/</id>
    <published>2018-10-18T07:21:17.000Z</published>
    <updated>2018-10-21T03:17:49.483Z</updated>
    
    <content type="html"><![CDATA[<p><strong>response响应对象</strong><br>提供的方法：<br>void addCookie(Cookie cookie); <strong>服务器向客户端增加cookie对象</strong><br>void sendRedirect(String location) throws IOException; <strong>页面跳转的一种方式（重定向）</strong><br>void setContentType(String type); <strong>设置服务端响应的编码（设置服务端tomcat的类型）</strong></p><hr><p>示例：登录界面<br>login.jsp -&gt; check.jsp -&gt; success.jsp</p><p>login.jsp:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;form action= &quot;check.jsp&quot; method=&quot;post&quot;&gt;</span><br><span class="line">   用户名：&lt;input type=&quot;text&quot; name=&quot;uname&quot;&gt;&lt;br/&gt;</span><br><span class="line">   密码：&lt;input type=&quot;password&quot; name=&quot;upwd&quot;&gt;&lt;br/&gt;</span><br><span class="line">   &lt;input type=&quot;submit&quot; value = &quot;登陆&quot;&gt;&lt;br/&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>check.jsp(重定向跳转):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">String name = request.getParameter(&quot;uname&quot;);</span><br><span class="line">String pwd = request.getParameter(&quot;upwd&quot;);</span><br><span class="line">if(name.equals(&quot;zs&quot;)&amp;&amp;pwd.equals(&quot;abc&quot;))&#123;//假设zs 密码abc</span><br><span class="line">response.sendRedirect(&quot;success.jsp&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;//登陆失败</span><br><span class="line">out.print(&quot;用户名或者密码有误！&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>success.jsp:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">登录成功！&lt;br/&gt;</span><br><span class="line">欢迎您：</span><br><span class="line">&lt;%</span><br><span class="line">String name = request.getParameter(&quot;uname&quot;);</span><br><span class="line">out.print(name);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><hr><p>运行如下：<br><img src="/2018/10/18/response、请求转发和重定向/1.png" alt=""></p><hr><p><img src="/2018/10/18/response、请求转发和重定向/2.png" alt=""></p><hr><p><strong>这说明重定向确实是跳转了，但是数据（名字）却丢失了。</strong></p><p>我现在将重定向改成请求转发：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">String name = request.getParameter(&quot;uname&quot;);</span><br><span class="line">String pwd = request.getParameter(&quot;upwd&quot;);</span><br><span class="line">if(name.equals(&quot;zs&quot;)&amp;&amp;pwd.equals(&quot;abc&quot;))&#123;//假设zs 密码abc</span><br><span class="line">//response.sendRedirect(&quot;success.jsp&quot;); 页面跳转 重定向 导致数据丢失</span><br><span class="line">//换成页面跳转：请求转发 可以获取到数据，并且地址栏没有改变（仍然保留转发时的界面）</span><br><span class="line">request.getRequestDispatcher(&quot;success.jsp&quot;).forward(request,response);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;//登陆失败</span><br><span class="line">out.print(&quot;用户名或者密码有误！&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><hr><p><img src="/2018/10/18/response、请求转发和重定向/3.png" alt=""></p><hr><p>可以看到现在页面是成功了，但是地址栏没有改变。</p><p><strong>请求转发和重定向的区别：</strong><br>|  | 请求转发 | 重定向 |<br>|:—:|:—:|:—:|<br>| 地址栏是否改变 | 不变（check.jsp） | 改变（success.jsp） |<br>| 是否保留第一次请求时的数据 | 保留 | 不保留 |<br>| 请求的次数 | 1 | 2 |<br>|跳转发生的位置|服务端|客户端发出的第二次跳转|</p><p>转发：<br>张三（客户端）-&gt;[服务窗口A（服务端）-&gt;服务窗口B]</p><p>重定向：<br>张三（客户端）-&gt;服务窗口A（服务器）-&gt;去找B<br>张三（客户端）-&gt;服务窗口B（服务器）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;response响应对象&lt;/strong&gt;&lt;br&gt;提供的方法：&lt;br&gt;void addCookie(Cookie cookie); &lt;strong&gt;服务器向客户端增加cookie对象&lt;/strong&gt;&lt;br&gt;void sendRedirect(String 
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>快速排序 详解（快速排序 双路快排 三路快排）</title>
    <link href="http://yoursite.com/2018/10/18/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-%E8%AF%A6%E8%A7%A3%EF%BC%88%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-%E5%8F%8C%E8%B7%AF%E5%BF%AB%E6%8E%92-%E4%B8%89%E8%B7%AF%E5%BF%AB%E6%8E%92%EF%BC%89/"/>
    <id>http://yoursite.com/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/</id>
    <published>2018-10-18T05:13:13.000Z</published>
    <updated>2018-12-06T11:09:02.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a><strong>快速排序</strong></h1><p>注：图片均来自于慕课网算法课程 bobo老师</p><p>快速排序可以说是20世纪最伟大的算法之一了。相信都有所耳闻，它的速度也正如它的名字那样，是一个非常快的算法了。当然它也后期经过了不断的改进和优化，才被公认为是一个值得信任的非常优秀的算法。</p><h2 id="c-中algorithm中的sort一般都是用的快排（在快排恶化的情况下才会转换成其它的排序）。"><a href="#c-中algorithm中的sort一般都是用的快排（在快排恶化的情况下才会转换成其它的排序）。" class="headerlink" title="c++中algorithm中的sort一般都是用的快排（在快排恶化的情况下才会转换成其它的排序）。"></a>c++中algorithm中的sort一般都是用的快排（在快排恶化的情况下才会转换成其它的排序）。</h2><h2 id="核心思想：分治"><a href="#核心思想：分治" class="headerlink" title="核心思想：分治"></a>核心思想：分治</h2><h2 id="下面我们来讲解一下快排的子过程的思路："><a href="#下面我们来讲解一下快排的子过程的思路：" class="headerlink" title="下面我们来讲解一下快排的子过程的思路："></a>下面我们来讲解一下快排的子过程的思路：</h2><h3 id="快速排序是把数组中的一个元素挪到它排好序时应该所处的位置，如图："><a href="#快速排序是把数组中的一个元素挪到它排好序时应该所处的位置，如图：" class="headerlink" title="快速排序是把数组中的一个元素挪到它排好序时应该所处的位置，如图："></a>快速排序是把数组中的一个元素挪到它排好序时应该所处的位置，如图：</h3><p><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/1.png" alt=""></p><hr><h3 id="首先选择数组中的一个元素，比如用l索引指向最左边的元素v，逐渐遍历数组所有位于l左边的元素，在遍历的过程中，我们将逐渐整理出小于v的元素和大于v的元素，当然我们继续用一个索引j来记录小于v和大于v的分界点，然后我们当前访问的元素索引为i。"><a href="#首先选择数组中的一个元素，比如用l索引指向最左边的元素v，逐渐遍历数组所有位于l左边的元素，在遍历的过程中，我们将逐渐整理出小于v的元素和大于v的元素，当然我们继续用一个索引j来记录小于v和大于v的分界点，然后我们当前访问的元素索引为i。" class="headerlink" title="首先选择数组中的一个元素，比如用l索引指向最左边的元素v，逐渐遍历数组所有位于l左边的元素，在遍历的过程中，我们将逐渐整理出小于v的元素和大于v的元素，当然我们继续用一个索引j来记录小于v和大于v的分界点，然后我们当前访问的元素索引为i。"></a>首先选择数组中的一个元素，比如用l索引指向最左边的元素v，逐渐遍历数组所有位于l左边的元素，在遍历的过程中，我们将逐渐整理出小于v的元素和大于v的元素，当然我们继续用一个索引j来记录小于v和大于v的分界点，然后我们当前访问的元素索引为i。</h3><p><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/2.png" alt=""></p><hr><h3 id="那么i怎么处理呢？很简单当i指向的元素e大于v的时候，直接包含进大于v的部分中，像这样："><a href="#那么i怎么处理呢？很简单当i指向的元素e大于v的时候，直接包含进大于v的部分中，像这样：" class="headerlink" title="那么i怎么处理呢？很简单当i指向的元素e大于v的时候，直接包含进大于v的部分中，像这样："></a>那么i怎么处理呢？很简单当i指向的元素e大于v的时候，直接包含进大于v的部分中，像这样：</h3><p><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/3.png" alt=""></p><hr><h3 id="然后我们继续讨论下一个元素，此时i-，如图："><a href="#然后我们继续讨论下一个元素，此时i-，如图：" class="headerlink" title="然后我们继续讨论下一个元素，此时i++，如图："></a>然后我们继续讨论下一个元素，此时i++，如图：</h3><p><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/4.png" alt=""></p><hr><h3 id="如果元素e小于v的时候怎么做呢？只需要把元素e和橙色部分之后的一个元素交换，就可以了，此时索引j-。如图："><a href="#如果元素e小于v的时候怎么做呢？只需要把元素e和橙色部分之后的一个元素交换，就可以了，此时索引j-。如图：" class="headerlink" title="如果元素e小于v的时候怎么做呢？只需要把元素e和橙色部分之后的一个元素交换，就可以了，此时索引j++。如图："></a>如果元素e小于v的时候怎么做呢？只需要把元素e和橙色部分之后的一个元素交换，就可以了，此时索引j++。如图：</h3><p><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/5.png" alt=""><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/6.png" alt=""><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/7.png" alt=""></p><hr><h3 id="最后i继续往后走，到最后的时候就直接将数组分成了等于v，小于v，大于v的三部分。"><a href="#最后i继续往后走，到最后的时候就直接将数组分成了等于v，小于v，大于v的三部分。" class="headerlink" title="最后i继续往后走，到最后的时候就直接将数组分成了等于v，小于v，大于v的三部分。**"></a>最后i继续往后走，到最后的时候就直接将数组分成了等于v，小于v，大于v的三部分。**</h3><p>**最后将l位置和j位置交换，就实现了快速排序的子过程，如图：<br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/8.png" alt=""></p><hr><h2 id="下面是快速排序代码（使用template模板泛型是因为我们有的时候不仅仅是需要对int数组进行排序，还可能是浮点数，字符串，甚至是结构体，类进行排序）："><a href="#下面是快速排序代码（使用template模板泛型是因为我们有的时候不仅仅是需要对int数组进行排序，还可能是浮点数，字符串，甚至是结构体，类进行排序）：" class="headerlink" title="下面是快速排序代码（使用template模板泛型是因为我们有的时候不仅仅是需要对int数组进行排序，还可能是浮点数，字符串，甚至是结构体，类进行排序）："></a>下面是快速排序代码（<strong>使用template模板泛型是因为我们有的时候不仅仅是需要对int数组进行排序，还可能是浮点数，字符串，甚至是结构体，类进行排序</strong>）：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">//对arr[l...r]进行partition操作 </span><br><span class="line">int  partition(T arr[],int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">T v=arr[l];</span><br><span class="line">int j;</span><br><span class="line">j=l;</span><br><span class="line">for(int i=l+1;i&lt;=r;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(arr[i]&lt;v)</span><br><span class="line">&#123;</span><br><span class="line">swap(arr[j+1],arr[i]);</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swap(arr[l],arr[j]);</span><br><span class="line">return j;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//对arr[l...r]部分进行排序 </span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void __quicksort(T arr[],int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">if(l&gt;=r)</span><br><span class="line">return ;</span><br><span class="line"></span><br><span class="line">int p=partition(arr,l,r);</span><br><span class="line">__quicksort(arr,l,p-1);</span><br><span class="line">__quicksort(arr,p+1,r);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void quicksort(T arr[],int n)</span><br><span class="line">&#123;</span><br><span class="line">__quicksort(arr,0,n-1);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int arr[100];</span><br><span class="line">int n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">cin&gt;&gt;arr[i];</span><br><span class="line"></span><br><span class="line">quicksort(arr,n);</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">cout&lt;&lt;arr[i]&lt;&lt;&quot; &quot;;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家知道，快速排序虽然高效，但并不稳定，当数组中存在大量重复元素时，比如举个例子，我用模板测试归并排序和快速排序的时间，设置一个1000000的数组，数组元素在0-10之间随机取值，那么用归并需要花费0.290727s而快排需要花费171.151s，对，你没有看错。当快速排序最优的时候是o（nlgn），而此时显然退化到了o（n^2）的级别。这是为什么？</p><p>还记得上面我写的快排的子过程么，考虑到了e&gt;v,e&lt;v，而e=v的情况没有考虑对吧。看了代码理解了的同学应该清楚，其实我是把等于v这种情况包含进了大于v的情况里面了，那么会出现什么问题？<strong>不管是当条件是大于等于还是小于等于v，当数组中重复元素非常多的时候，等于v的元素太多，那么就将数组分成了极度不平衡的两个部分，因为等于v的部分总是集中在数组的某一边。</strong></p><p>那么一种优化的方式便是进行<strong>双路快排</strong>。</p><h1 id="双路快排（我看百度百科上面的快排题解c语言版好像用的就是双路快排）"><a href="#双路快排（我看百度百科上面的快排题解c语言版好像用的就是双路快排）" class="headerlink" title="双路快排（我看百度百科上面的快排题解c语言版好像用的就是双路快排）"></a><strong>双路快排（我看百度百科上面的快排题解c语言版好像用的就是双路快排）</strong></h1><h2 id="下面我们来讲解一下子过程的思路："><a href="#下面我们来讲解一下子过程的思路：" class="headerlink" title="下面我们来讲解一下子过程的思路："></a>下面我们来讲解一下子过程的思路：</h2><hr><h3 id="和快排不同的是此时我们将小于v和大于v的元素放在数组的两端，那么我们将引用新的索引j的记录大于v的边界位置。如图："><a href="#和快排不同的是此时我们将小于v和大于v的元素放在数组的两端，那么我们将引用新的索引j的记录大于v的边界位置。如图：" class="headerlink" title="和快排不同的是此时我们将小于v和大于v的元素放在数组的两端，那么我们将引用新的索引j的记录大于v的边界位置。如图："></a><strong>和快排不同的是此时我们将小于v和大于v的元素放在数组的两端，那么我们将引用新的索引j的记录大于v的边界位置。如图：</strong></h3><p><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/9.png" alt=""></p><hr><h3 id="i索引不断向后扫描，当i的元素小于v的时候继续向后扫描，直到碰到了某个元素大于等于v。j同理，直到碰到某个元素小于等于v。如图："><a href="#i索引不断向后扫描，当i的元素小于v的时候继续向后扫描，直到碰到了某个元素大于等于v。j同理，直到碰到某个元素小于等于v。如图：" class="headerlink" title="i索引不断向后扫描，当i的元素小于v的时候继续向后扫描，直到碰到了某个元素大于等于v。j同理，直到碰到某个元素小于等于v。如图："></a><strong>i索引不断向后扫描，当i的元素小于v的时候继续向后扫描，直到碰到了某个元素大于等于v。j同理，直到碰到某个元素小于等于v。如图：</strong></h3><p><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/10.png" alt=""></p><hr><h3 id="然后绿色的部分便归并到了一起，而此时只要交换i和j的位置就可以了，然后i-，j–就行了。如图："><a href="#然后绿色的部分便归并到了一起，而此时只要交换i和j的位置就可以了，然后i-，j–就行了。如图：" class="headerlink" title="然后绿色的部分便归并到了一起，而此时只要交换i和j的位置就可以了，然后i++，j–就行了。如图："></a><strong>然后绿色的部分便归并到了一起，而此时只要交换i和j的位置就可以了，然后i++，j–就行了。如图：</strong></h3><p><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/11.png" alt=""><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/12.png" alt=""></p><hr><h3 id="直到i和j遍历完毕，整个数组排序完成。"><a href="#直到i和j遍历完毕，整个数组排序完成。" class="headerlink" title="直到i和j遍历完毕，整个数组排序完成。"></a><strong>直到i和j遍历完毕，整个数组排序完成。</strong></h3><h3 id="这种优化当它遇到重复元素的时候，也能近乎将他们平分开来。"><a href="#这种优化当它遇到重复元素的时候，也能近乎将他们平分开来。" class="headerlink" title="这种优化当它遇到重复元素的时候，也能近乎将他们平分开来。"></a><strong>这种优化当它遇到重复元素的时候，也能近乎将他们平分开来。</strong></h3><p>##　<strong>双路快排代码如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">int partition(T arr[],int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">T v=arr[l];</span><br><span class="line">int i,j;</span><br><span class="line">i=l+1;j=r;</span><br><span class="line">while(true)</span><br><span class="line">&#123;</span><br><span class="line">while(arr[i]&lt;v&amp;&amp;i&lt;=r)i++;</span><br><span class="line">while(j&gt;=l+1&amp;&amp;arr[j]&gt;v)j--;</span><br><span class="line"></span><br><span class="line">if(i&gt;j)break;</span><br><span class="line">swap(arr[i],arr[j]);</span><br><span class="line">i++;</span><br><span class="line">j--;</span><br><span class="line"> &#125; </span><br><span class="line"> swap(arr[l],arr[j]);</span><br><span class="line"> </span><br><span class="line">return j;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void __quicksort2(T arr[],int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">if(l&gt;=r)</span><br><span class="line">return ;</span><br><span class="line"></span><br><span class="line">int p=partition(arr,l,r);</span><br><span class="line">__quicksort2(arr,l,p-1);</span><br><span class="line">__quicksort2(arr,p+1,r);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void quicksort(T arr[],int n)</span><br><span class="line">&#123;</span><br><span class="line">__quicksort2(arr,0,n-1);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int arr[100],n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">cin&gt;&gt;arr[i];</span><br><span class="line"></span><br><span class="line">quicksort(arr,n);</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">cout&lt;&lt;arr[i]&lt;&lt;&quot; &quot;;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>当然除了快排和双路快排，还有一个更加经典的优化，我们叫它<strong>三路快排</strong>。</p><h1 id="三路快排"><a href="#三路快排" class="headerlink" title="三路快排"></a><strong>三路快排</strong></h1><h2 id="下面我们来讲解一下子过程的思路：-1"><a href="#下面我们来讲解一下子过程的思路：-1" class="headerlink" title="下面我们来讲解一下子过程的思路："></a>下面我们来讲解一下子过程的思路：</h2><h3 id="双路快排将整个数组分成了小于v，大于v的两部分，而三路快排则是将数组分成了小于v，等于v，大于v的三个部分，当递归处理的时候，遇到等于v的元素直接不用管，只需要处理小于v，大于v的元素就好了。某一时刻的中间过程如下图："><a href="#双路快排将整个数组分成了小于v，大于v的两部分，而三路快排则是将数组分成了小于v，等于v，大于v的三个部分，当递归处理的时候，遇到等于v的元素直接不用管，只需要处理小于v，大于v的元素就好了。某一时刻的中间过程如下图：" class="headerlink" title="双路快排将整个数组分成了小于v，大于v的两部分，而三路快排则是将数组分成了小于v，等于v，大于v的三个部分，当递归处理的时候，遇到等于v的元素直接不用管，只需要处理小于v，大于v的元素就好了。某一时刻的中间过程如下图："></a><strong>双路快排将整个数组分成了小于v，大于v的两部分，而三路快排则是将数组分成了小于v，等于v，大于v的三个部分，当递归处理的时候，遇到等于v的元素直接不用管，只需要处理小于v，大于v的元素就好了。某一时刻的中间过程如下图：</strong></h3><p><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/13.png" alt=""></p><hr><h3 id="当元素e等于v的时候直接纳入绿色区域之内，然后i-处理下一个元素。如图："><a href="#当元素e等于v的时候直接纳入绿色区域之内，然后i-处理下一个元素。如图：" class="headerlink" title="当元素e等于v的时候直接纳入绿色区域之内，然后i++处理下一个元素。如图："></a><strong>当元素e等于v的时候直接纳入绿色区域之内，然后i++处理下一个元素。如图：</strong></h3><p><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/14.png" alt=""></p><hr><h3 id="当元素e小于v的时候，只需要将元素e与等于e的第一个元素交换就行了，这和刚开始讲的快速排序方法类似。同理，当大于v的时候执行相似的操作。如图："><a href="#当元素e小于v的时候，只需要将元素e与等于e的第一个元素交换就行了，这和刚开始讲的快速排序方法类似。同理，当大于v的时候执行相似的操作。如图：" class="headerlink" title="当元素e小于v的时候，只需要将元素e与等于e的第一个元素交换就行了，这和刚开始讲的快速排序方法类似。同理，当大于v的时候执行相似的操作。如图："></a><strong>当元素e小于v的时候，只需要将元素e与等于e的第一个元素交换就行了，这和刚开始讲的快速排序方法类似。同理，当大于v的时候执行相似的操作。如图：</strong></h3><p><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/15.png" alt=""><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/16.png" alt=""></p><hr><h3 id="当全部元素处理完之后，数组便成了这个样子："><a href="#当全部元素处理完之后，数组便成了这个样子：" class="headerlink" title="当全部元素处理完之后，数组便成了这个样子："></a><strong>当全部元素处理完之后，数组便成了这个样子：</strong></h3><p><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/17.png" alt=""></p><hr><h2 id="三路快排的代码如下："><a href="#三路快排的代码如下：" class="headerlink" title="三路快排的代码如下："></a><strong>三路快排的代码如下：</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void __quicksort3(T arr[],int l,int r)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">if(l&gt;=r)</span><br><span class="line">return ;</span><br><span class="line"></span><br><span class="line">T v=arr[l];</span><br><span class="line">int lt=l;</span><br><span class="line">int gt=r+1;</span><br><span class="line">int i=l+1;</span><br><span class="line">while(i&lt;gt)</span><br><span class="line">&#123;</span><br><span class="line">if(arr[i]&lt;v)</span><br><span class="line">&#123;swap(arr[i],arr[lt+1]);</span><br><span class="line">lt++;</span><br><span class="line">i++;&#125;</span><br><span class="line"></span><br><span class="line">else if(arr[i]&gt;v)</span><br><span class="line">&#123;</span><br><span class="line">swap(arr[i],arr[gt-1]);</span><br><span class="line">gt--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">swap(arr[l],arr[lt]);</span><br><span class="line"> __quicksort3(arr,l,lt-1);</span><br><span class="line"> __quicksort3(arr,gt,r);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void quicksort3(T arr[],int n)</span><br><span class="line">&#123;</span><br><span class="line">__quicksort3(arr,0,n-1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a[100],n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line"></span><br><span class="line">quicksort3(a,n);</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;&lt;strong&gt;快速排序&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;注：图片均来自于慕课网算法课程 bobo老师&lt;/p&gt;
&lt;p&gt;快速排序可以说是20世纪最伟大
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>归并排序 详解</title>
    <link href="http://yoursite.com/2018/10/18/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F-%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/10/18/归并排序-详解/</id>
    <published>2018-10-18T03:07:19.000Z</published>
    <updated>2018-12-06T11:10:52.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a><strong>算法复杂度</strong></h2><p>也许有很多同学说，原来也学过很多O（n^2）或者O（n^3）的排序算法，有的可能优化一下能到O（n）的时间复杂度，但是在计算机中都是很快的执行完了，没有看出来算法优化的步骤，那么我想说有可能是你当时使用的测试用例太小了，我们可以简单的做一下比较：<br><img src="/2018/10/18/归并排序-详解/1.png" alt=""></p><p>当数据量很大的时候 nlogn的优势将会比n^2 越来越大，当n=10^5的时候，nlogn 的算法要比n^2 的算法快6000倍，那么6000倍是什么概念呢，就是如果我们要处理一个数据集，用nlogn的算法要处理一天的话，用n^2的算法将要处理6020天。这就基本相当于是15年。一个优化改进的算法可能比一个比一个笨的算法速度快了许多，这就是为什么我们要学习算法。</p><h2 id="核心思想：分治。"><a href="#核心思想：分治。" class="headerlink" title="核心思想：分治。"></a><strong>核心思想：分治。</strong></h2><h2 id="下面我们来看归并排序的思路（先讲思路再来具体讲归并的细节）："><a href="#下面我们来看归并排序的思路（先讲思路再来具体讲归并的细节）：" class="headerlink" title="下面我们来看归并排序的思路（先讲思路再来具体讲归并的细节）："></a><strong>下面我们来看归并排序的思路（先讲思路再来具体讲归并的细节）：</strong></h2><hr><h3 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a><strong>归并排序（Merge Sort）</strong></h3><p><img src="/2018/10/18/归并排序-详解/2.png" alt=""></p><hr><h3 id="当我们要排序这样一个数组的时候，归并排序法首先将这个数组分成一半。如图："><a href="#当我们要排序这样一个数组的时候，归并排序法首先将这个数组分成一半。如图：" class="headerlink" title="当我们要排序这样一个数组的时候，归并排序法首先将这个数组分成一半。如图："></a><strong>当我们要排序这样一个数组的时候，归并排序法首先将这个数组分成一半。如图：</strong></h3><p><img src="/2018/10/18/归并排序-详解/3.png" alt=""></p><hr><h3 id="然后想办法把左边的数组给排序，右边的数组给排序，之后呢再将它们归并起来。当然了当我们对左边的数组和右边的素组进行排序的时候，再分别将左边的数组和右边的数组分成一半，然后对每一个部分先排序，再归并。如图："><a href="#然后想办法把左边的数组给排序，右边的数组给排序，之后呢再将它们归并起来。当然了当我们对左边的数组和右边的素组进行排序的时候，再分别将左边的数组和右边的数组分成一半，然后对每一个部分先排序，再归并。如图：" class="headerlink" title="然后想办法把左边的数组给排序，右边的数组给排序，之后呢再将它们归并起来。当然了当我们对左边的数组和右边的素组进行排序的时候，再分别将左边的数组和右边的数组分成一半，然后对每一个部分先排序，再归并。如图："></a><strong>然后想办法把左边的数组给排序，右边的数组给排序，之后呢再将它们归并起来。当然了当我们对左边的数组和右边的素组进行排序的时候，再分别将左边的数组和右边的数组分成一半，然后对每一个部分先排序，再归并。如图：</strong></h3><p><img src="/2018/10/18/归并排序-详解/4.png" alt=""></p><hr><h3 id="对于上面的每一个部分呢，我们依然是先将他们分半，再归并，如图："><a href="#对于上面的每一个部分呢，我们依然是先将他们分半，再归并，如图：" class="headerlink" title="对于上面的每一个部分呢，我们依然是先将他们分半，再归并，如图："></a><strong>对于上面的每一个部分呢，我们依然是先将他们分半，再归并，如图：</strong></h3><p><img src="/2018/10/18/归并排序-详解/5.png" alt=""></p><hr><h3 id="分到一定细度的时候，每一个部分就只有一个元素了，那么我们此时不用排序，对他们进行一次简单的归并就好了。如图："><a href="#分到一定细度的时候，每一个部分就只有一个元素了，那么我们此时不用排序，对他们进行一次简单的归并就好了。如图：" class="headerlink" title="分到一定细度的时候，每一个部分就只有一个元素了，那么我们此时不用排序，对他们进行一次简单的归并就好了。如图："></a><strong>分到一定细度的时候，每一个部分就只有一个元素了，那么我们此时不用排序，对他们进行一次简单的归并就好了。如图：</strong></h3><p><img src="/2018/10/18/归并排序-详解/6.png" alt=""></p><hr><h3 id="归并到上一个层级之后继续归并，归并到更高的层级，如图："><a href="#归并到上一个层级之后继续归并，归并到更高的层级，如图：" class="headerlink" title="归并到上一个层级之后继续归并，归并到更高的层级，如图："></a><strong>归并到上一个层级之后继续归并，归并到更高的层级，如图：</strong></h3><p><img src="/2018/10/18/归并排序-详解/7.png" alt=""></p><hr><h3 id="直至最后归并完成。"><a href="#直至最后归并完成。" class="headerlink" title="直至最后归并完成。"></a><strong>直至最后归并完成。</strong></h3><p><img src="/2018/10/18/归并排序-详解/8.png" alt=""></p><hr><p> <strong>那么如何归并呢？我们是否可以用O（n）的算法将两个数组归并到一起形成一个数组呢？如果可以的话，我们将可以用递归的过程来实现整个归并。这是你想起来很简单但是操作起来并不是那么简单的问题。</strong></p><h2 id="归并细节："><a href="#归并细节：" class="headerlink" title="归并细节："></a><strong>归并细节：</strong></h2><p>比如有两个已经排序好的数组，如何将他归并成一个数组？</p><p><strong>我们可以开辟一个临时数组来辅助我们的归并。也就是说他比我们插入排序也好，选择排序也好多使用了存储的空间，也就是说他需要o（n）的额外空间来完成这个排序。只不过现在计算机中时间的效率要比空间的效率重要的多。无论是内存也好还是硬盘也好可以存储的数据越来越多，所以设计一个算法，时间复杂度是要优先考虑的。</strong></p><hr><h3 id="整体来讲我们要使用三个索引来在数组内进行追踪。"><a href="#整体来讲我们要使用三个索引来在数组内进行追踪。" class="headerlink" title="整体来讲我们要使用三个索引来在数组内进行追踪。"></a><strong>整体来讲我们要使用三个索引来在数组内进行追踪。</strong></h3><p><img src="/2018/10/18/归并排序-详解/9.png" alt=""></p><hr><h3 id="蓝色的箭头表示最终选择的位置，而红色的箭头表示两个数组当前要比较的元素，比如当前是2与1比较，1比2小，所以1放到蓝色的箭头中，蓝色的箭头后移，1的箭头后移。"><a href="#蓝色的箭头表示最终选择的位置，而红色的箭头表示两个数组当前要比较的元素，比如当前是2与1比较，1比2小，所以1放到蓝色的箭头中，蓝色的箭头后移，1的箭头后移。" class="headerlink" title="蓝色的箭头表示最终选择的位置，而红色的箭头表示两个数组当前要比较的元素，比如当前是2与1比较，1比2小，所以1放到蓝色的箭头中，蓝色的箭头后移，1的箭头后移。"></a><strong>蓝色的箭头表示最终选择的位置，而红色的箭头表示两个数组当前要比较的元素，比如当前是2与1比较，1比2小，所以1放到蓝色的箭头中，蓝色的箭头后移，1的箭头后移。</strong></h3><p><img src="/2018/10/18/归并排序-详解/10.png" alt=""></p><hr><h3 id="然后2与4比较，2比4小那么2到蓝色的箭头中，蓝色箭头后移，2后移，继续比较……"><a href="#然后2与4比较，2比4小那么2到蓝色的箭头中，蓝色箭头后移，2后移，继续比较……" class="headerlink" title="然后2与4比较，2比4小那么2到蓝色的箭头中，蓝色箭头后移，2后移，继续比较……."></a><strong>然后2与4比较，2比4小那么2到蓝色的箭头中，蓝色箭头后移，2后移，继续比较…….</strong></h3><p><img src="/2018/10/18/归并排序-详解/11.png" alt=""></p><hr><h3 id="归并思路就是这样了，最后唯一需要注意的是那个先比较完的话，那么剩下的直接不需要比较，把后面的直接移上去就可以了，这个需要提前判定一下。"><a href="#归并思路就是这样了，最后唯一需要注意的是那个先比较完的话，那么剩下的直接不需要比较，把后面的直接移上去就可以了，这个需要提前判定一下。" class="headerlink" title="归并思路就是这样了，最后唯一需要注意的是那个先比较完的话，那么剩下的直接不需要比较，把后面的直接移上去就可以了，这个需要提前判定一下。"></a><strong>归并思路就是这样了，最后唯一需要注意的是那个先比较完的话，那么剩下的直接不需要比较，把后面的直接移上去就可以了，这个需要提前判定一下。</strong></h3><h2 id="归并排序代码如下："><a href="#归并排序代码如下：" class="headerlink" title="归并排序代码如下："></a><strong>归并排序代码如下：</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">void merge(int a[],int l,int r,int mid)</span><br><span class="line">&#123;</span><br><span class="line">  int aux[r-l+1],i,j,k;</span><br><span class="line">  </span><br><span class="line">  for(k=l;k&lt;=r;k++)</span><br><span class="line">  aux[k-l]=a[k];</span><br><span class="line">  </span><br><span class="line">  i=l;</span><br><span class="line">  j=mid+1;</span><br><span class="line">  for(k=l;k&lt;=r;k++)</span><br><span class="line">  &#123;</span><br><span class="line">  if(i&gt;mid)</span><br><span class="line">  &#123;</span><br><span class="line">  a[k]=aux[j-l];</span><br><span class="line">  j++;</span><br><span class="line">  &#125;</span><br><span class="line">else if(j&gt;r)</span><br><span class="line">&#123;</span><br><span class="line">a[k]=aux[i-l];</span><br><span class="line">i++;</span><br><span class="line">  &#125;</span><br><span class="line">else if(aux[i-l]&gt;aux[j-l])</span><br><span class="line">&#123;</span><br><span class="line">a[k]=aux[j-l];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">a[k]=aux[i-l];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void merge_sort(int a[],int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">    if(l&gt;=r)</span><br><span class="line">return ;</span><br><span class="line"></span><br><span class="line">int mid=(l+r)/2;</span><br><span class="line"></span><br><span class="line">merge_sort(a,l,mid);</span><br><span class="line">merge_sort(a,mid+1,r);</span><br><span class="line">merge(a,l,r,mid);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">void mergesort(int a[],int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">merge_sort(a,l,r-1);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a[105],n,i;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line"></span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line"></span><br><span class="line">mergesort(a,0,n);</span><br><span class="line"></span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">printf(&quot;%d &quot;,a[i]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法复杂度&quot;&gt;&lt;a href=&quot;#算法复杂度&quot; class=&quot;headerlink&quot; title=&quot;算法复杂度&quot;&gt;&lt;/a&gt;&lt;strong&gt;算法复杂度&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;也许有很多同学说，原来也学过很多O（n^2）或者O（n^3）的排序算法，有的可能优
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
