<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>第一口浮生茶</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-28T03:53:18.540Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>koris</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JDBC使用原理及使用Statement访问数据库</title>
    <link href="http://yoursite.com/2018/10/23/JDBC%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8Statement%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2018/10/23/JDBC使用原理及使用Statement访问数据库/</id>
    <published>2018-10-23T12:42:56.000Z</published>
    <updated>2018-10-28T03:53:18.540Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JDBC：Java DataBase Connectivity</strong><br><strong>作用：可以为多种关系型数据库DBMS 提供统一的访问方式</strong><br><strong>目的：用Java来操作数据库</strong></p><p>1.JDBC API：提供各种操作的访问接口，Connection Statement PreparedStatement ResultSet<br>2.JDBC DriverManager：管理不同的数据库驱动<br>3.各种数据库驱动：相应数据库厂商提供的（第三方公司提供），连接\直接操作数据库</p><p><strong>JDBC功能：</strong><br>具体是通过以下类/接口实现：<br>DriverManager：管理jdbc驱动<br>Connection：连接<br>Statement（PrepareStatement）：增删改查<br>CallableStatement：调用数据库中的存储过程/存储函数<br>Result：返回的结果集</p><p><strong>JDBC访问数据库的具体步骤：</strong><br>a.导入驱动，加载具体的驱动类。<br>b.与数据库建立连接<br>c.发送sql，执行<br>d.处理结果集(查询)</p><p><strong>数据库驱动：</strong><br>||驱动jar|具体驱动类|连接字符串|<br>|:–:|:–:|:–:|<br>|oracle|ojdbc-x.jar|oracle.jdbc.OracleDriver|<br>|MySQL|mysql-connector-java-x.jar|com.mysql.jdbc.Driver|<br>|sqlServer|sql jdbc-x.jar|com.microsoft.sqlserver.jdbc.SQLServerDriver|</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;JDBC：Java DataBase Connectivity&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;作用：可以为多种关系型数据库DBMS 提供统一的访问方式&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;目的：用Java来操作数据库&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>session执行机制</title>
    <link href="http://yoursite.com/2018/10/21/session%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/10/21/session执行机制/</id>
    <published>2018-10-21T06:56:17.000Z</published>
    <updated>2018-10-22T07:44:44.943Z</updated>
    
    <content type="html"><![CDATA[<p><strong>session：会话</strong><br>什么叫一次会话？<br>浏览网站： 开始-关闭<br>购物： 浏览-付款-退出<br>电子邮件：浏览-写邮件-退出</p><p>一次开始到一次结束的过程叫一次会话</p><p>session机制:<br>客户端第一次请求服务端时，（jsessionid-sessionid匹配，不过第一次肯定是不成功的，jsessionid根本就没有）服务端会产生一个session对象（用于保存该客户的信息）;并且每个session对象 都会有一个唯一的sessionId(用于区分其他session);<br>服务端又会产生一个cookie，并且该cookie的name=JSESSIONID，value=服务端sessionID的值；然后 服务端会在 响应客户端的同时 将该cookie发送给客户端，至此 客户端就有了 一个cookie（JSESSIONID）；因此，客户端的cookie就可以和服务端的session一一对应（JSESSION–sessionID）</p><p>客户端第二/n次请求服务端时，服务端会先用客户端cookie中的JSESSIONID 去服务端的sesssion中匹配sessionid，如果匹配成功，说明此用户不是第一次访问；就无需登录。</p><p>举个形象一点例子：<br>客户端：顾客<br>服务端：存包处   商场</p><p>顾客第一次存包：<br>商场判断此人是否之前已经存过包（通过你手里是否有钥匙）<br>如果是新顾客（没钥匙） 会分配给一个钥匙给该顾客；钥匙会和柜子一一对应<br>第二/n次存包：商场判断此人是否之前已经存过包（通过你手里是否有钥匙）<br>如果是老顾客，则不需要分配；故顾客手里的钥匙和柜子自动一一对应。</p><hr><p><strong>session:</strong><br><strong>1.session是存储在服务端的</strong><br><strong>2.session是在同一个用户（客户）请求时 共享</strong><br><strong>3.实现机制：第一次客户请求时，产生一个sessionid并复制给cookie的jsessionid 然后发给客户端。最终通过sessionid和用户发过来的jssessionid实现一一对应机制。</strong></p><hr><p><strong>session方法:</strong><br>1.String  getId（）：获取sessionId<br>2.boolean isNew（）：判断是否是新用户（第一次访问）<br>3.void invalidate（）：使session失效（退出登录 注销）<br>4.void setAttribute(),Object getAttribute();<br>5.void setMaxInactiveInterval(秒)：设置最大有效 非活动时间<br>6.int getMaxInactiveInterval(秒)：获取最大有效 非活动时间</p><p>示例：</p><p><strong>登录功能</strong></p><p>loginin.jsp还是和原来一样  正常的登录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;form action= &quot;check.jsp&quot; method=&quot;post&quot;&gt;</span><br><span class="line">   </span><br><span class="line">   用户名：&lt;input type=&quot;text&quot; name=&quot;uname&quot;&gt;&lt;br/&gt;</span><br><span class="line">   密码：&lt;input type=&quot;password&quot; name=&quot;upwd&quot;&gt;&lt;br/&gt;</span><br><span class="line">   &lt;input type=&quot;submit&quot; value = &quot;登陆&quot;&gt;&lt;br/&gt;</span><br><span class="line">   </span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>check.jsp:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">String name = request.getParameter(&quot;uname&quot;);</span><br><span class="line">String pwd = request.getParameter(&quot;upwd&quot;);</span><br><span class="line">if(name.equals(&quot;zs&quot;)&amp;&amp;pwd.equals(&quot;abc&quot;))&#123;</span><br><span class="line">//只有登录成功 session中才会存在uname/upwd</span><br><span class="line">session.setAttribute(&quot;uname&quot;, name);</span><br><span class="line">session.setAttribute(&quot;upwd&quot;, pwd);</span><br><span class="line">session.setMaxInactiveInterval(10);</span><br><span class="line">request.getRequestDispatcher(&quot;welcome.jsp&quot;).forward(request, response);</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line">//登陆失败</span><br><span class="line">response.sendRedirect(&quot;loginin.jsp&quot;);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>welcome.jsp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">欢迎您：</span><br><span class="line">&lt;%</span><br><span class="line">String name = (String)session.getAttribute(&quot;uname&quot;);</span><br><span class="line"></span><br><span class="line">//如果用户没有登录 而是直接通过地址来访问welcome.jsp 则必然或渠道的name是null 跳回登录页</span><br><span class="line">if(name!=null)</span><br><span class="line">&#123;</span><br><span class="line">out.print(name);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">response.sendRedirect(&quot;loginin.jsp&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;session：会话&lt;/strong&gt;&lt;br&gt;什么叫一次会话？&lt;br&gt;浏览网站： 开始-关闭&lt;br&gt;购物： 浏览-付款-退出&lt;br&gt;电子邮件：浏览-写邮件-退出&lt;/p&gt;
&lt;p&gt;一次开始到一次结束的过程叫一次会话&lt;/p&gt;
&lt;p&gt;session机制:&lt;br&gt;客户
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>response、请求转发和重定向</title>
    <link href="http://yoursite.com/2018/10/18/response%E3%80%81%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>http://yoursite.com/2018/10/18/response、请求转发和重定向/</id>
    <published>2018-10-18T07:21:17.000Z</published>
    <updated>2018-10-21T03:17:49.483Z</updated>
    
    <content type="html"><![CDATA[<p><strong>response响应对象</strong><br>提供的方法：<br>void addCookie(Cookie cookie); <strong>服务器向客户端增加cookie对象</strong><br>void sendRedirect(String location) throws IOException; <strong>页面跳转的一种方式（重定向）</strong><br>void setContentType(String type); <strong>设置服务端响应的编码（设置服务端tomcat的类型）</strong></p><hr><p>示例：登录界面<br>login.jsp -&gt; check.jsp -&gt; success.jsp</p><p>login.jsp:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;form action= &quot;check.jsp&quot; method=&quot;post&quot;&gt;</span><br><span class="line">   用户名：&lt;input type=&quot;text&quot; name=&quot;uname&quot;&gt;&lt;br/&gt;</span><br><span class="line">   密码：&lt;input type=&quot;password&quot; name=&quot;upwd&quot;&gt;&lt;br/&gt;</span><br><span class="line">   &lt;input type=&quot;submit&quot; value = &quot;登陆&quot;&gt;&lt;br/&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>check.jsp(重定向跳转):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">String name = request.getParameter(&quot;uname&quot;);</span><br><span class="line">String pwd = request.getParameter(&quot;upwd&quot;);</span><br><span class="line">if(name.equals(&quot;zs&quot;)&amp;&amp;pwd.equals(&quot;abc&quot;))&#123;//假设zs 密码abc</span><br><span class="line">response.sendRedirect(&quot;success.jsp&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;//登陆失败</span><br><span class="line">out.print(&quot;用户名或者密码有误！&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>success.jsp:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">登录成功！&lt;br/&gt;</span><br><span class="line">欢迎您：</span><br><span class="line">&lt;%</span><br><span class="line">String name = request.getParameter(&quot;uname&quot;);</span><br><span class="line">out.print(name);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><hr><p>运行如下：<br><img src="/2018/10/18/response、请求转发和重定向/1.png" alt=""></p><hr><p><img src="/2018/10/18/response、请求转发和重定向/2.png" alt=""></p><hr><p><strong>这说明重定向确实是跳转了，但是数据（名字）却丢失了。</strong></p><p>我现在将重定向改成请求转发：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">String name = request.getParameter(&quot;uname&quot;);</span><br><span class="line">String pwd = request.getParameter(&quot;upwd&quot;);</span><br><span class="line">if(name.equals(&quot;zs&quot;)&amp;&amp;pwd.equals(&quot;abc&quot;))&#123;//假设zs 密码abc</span><br><span class="line">//response.sendRedirect(&quot;success.jsp&quot;); 页面跳转 重定向 导致数据丢失</span><br><span class="line">//换成页面跳转：请求转发 可以获取到数据，并且地址栏没有改变（仍然保留转发时的界面）</span><br><span class="line">request.getRequestDispatcher(&quot;success.jsp&quot;).forward(request,response);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;//登陆失败</span><br><span class="line">out.print(&quot;用户名或者密码有误！&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><hr><p><img src="/2018/10/18/response、请求转发和重定向/3.png" alt=""></p><hr><p>可以看到现在页面是成功了，但是地址栏没有改变。</p><p><strong>请求转发和重定向的区别：</strong><br>|  | 请求转发 | 重定向 |<br>|:—:|:—:|:—:|<br>| 地址栏是否改变 | 不变（check.jsp） | 改变（success.jsp） |<br>| 是否保留第一次请求时的数据 | 保留 | 不保留 |<br>| 请求的次数 | 1 | 2 |<br>|跳转发生的位置|服务端|客户端发出的第二次跳转|</p><p>转发：<br>张三（客户端）-&gt;[服务窗口A（服务端）-&gt;服务窗口B]</p><p>重定向：<br>张三（客户端）-&gt;服务窗口A（服务器）-&gt;去找B<br>张三（客户端）-&gt;服务窗口B（服务器）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;response响应对象&lt;/strong&gt;&lt;br&gt;提供的方法：&lt;br&gt;void addCookie(Cookie cookie); &lt;strong&gt;服务器向客户端增加cookie对象&lt;/strong&gt;&lt;br&gt;void sendRedirect(String 
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>快速排序 详解（快速排序 双路快排 三路快排）</title>
    <link href="http://yoursite.com/2018/10/18/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-%E8%AF%A6%E8%A7%A3%EF%BC%88%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-%E5%8F%8C%E8%B7%AF%E5%BF%AB%E6%8E%92-%E4%B8%89%E8%B7%AF%E5%BF%AB%E6%8E%92%EF%BC%89/"/>
    <id>http://yoursite.com/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/</id>
    <published>2018-10-18T05:13:13.000Z</published>
    <updated>2018-10-21T03:18:01.729Z</updated>
    
    <content type="html"><![CDATA[<p><strong>快速排序</strong></p><p>快速排序可以说是20世纪最伟大的算法之一了。相信都有所耳闻，它的速度也正如它的名字那样，是一个非常快的算法了。当然它也后期经过了不断的改进和优化，才被公认为是一个值得信任的非常优秀的算法。<br><strong>c++中algorithm中的sort一般都是用的快排（在快排恶化的情况下才会转换成其它的排序）。</strong></p><p><strong>核心思想：分治</strong></p><p>下面我们来讲解一下快排的子过程的思路：</p><p><strong>快速排序是把数组中的一个元素挪到它排好序时应该所处的位置，如图：</strong><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/1.png" alt=""></p><hr><p><strong>首先选择数组中的一个元素，比如用l索引指向最左边的元素v，逐渐遍历数组所有位于l左边的元素，在遍历的过程中，我们将逐渐整理出小于v的元素和大于v的元素，当然我们继续用一个索引j来记录小于v和大于v的分界点，然后我们当前访问的元素索引为i。</strong><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/2.png" alt=""></p><hr><p><strong>那么i怎么处理呢？很简单当i指向的元素e大于v的时候，直接包含进大于v的部分中，像这样：</strong><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/3.png" alt=""></p><hr><p><strong>然后我们继续讨论下一个元素，此时i++，如图：</strong><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/4.png" alt=""></p><hr><p><strong>如果元素e小于v的时候怎么做呢？只需要把元素e和橙色部分之后的一个元素交换，就可以了，此时索引j++。如图：</strong><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/5.png" alt=""><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/6.png" alt=""><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/7.png" alt=""></p><hr><p><strong>最后i继续往后走，到最后的时候就直接将数组分成了等于v，小于v，大于v的三部分。</strong><br><strong>最后将l位置和j位置交换，就实现了快速排序的子过程，如图：</strong><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/8.png" alt=""></p><hr><p>下面是快速排序代码（<strong>使用template模板泛型是因为我们有的时候不仅仅是需要对int数组进行排序，还可能是浮点数，字符串，甚至是结构体，类进行排序</strong>）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">//对arr[l...r]进行partition操作 </span><br><span class="line">int  partition(T arr[],int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">T v=arr[l];</span><br><span class="line">int j;</span><br><span class="line">j=l;</span><br><span class="line">for(int i=l+1;i&lt;=r;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(arr[i]&lt;v)</span><br><span class="line">&#123;</span><br><span class="line">swap(arr[j+1],arr[i]);</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swap(arr[l],arr[j]);</span><br><span class="line">return j;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//对arr[l...r]部分进行排序 </span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void __quicksort(T arr[],int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">if(l&gt;=r)</span><br><span class="line">return ;</span><br><span class="line"></span><br><span class="line">int p=partition(arr,l,r);</span><br><span class="line">__quicksort(arr,l,p-1);</span><br><span class="line">__quicksort(arr,p+1,r);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void quicksort(T arr[],int n)</span><br><span class="line">&#123;</span><br><span class="line">__quicksort(arr,0,n-1);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int arr[100];</span><br><span class="line">int n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">cin&gt;&gt;arr[i];</span><br><span class="line"></span><br><span class="line">quicksort(arr,n);</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">cout&lt;&lt;arr[i]&lt;&lt;&quot; &quot;;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>大家知道，快速排序虽然高效，但并不稳定，当数组中存在大量重复元素时，比如举个例子，我用模板测试归并排序和快速排序的时间，设置一个1000000的数组，数组元素在0-10之间随机取值，那么用归并需要花费0.290727s而快排需要花费171.151s，对，你没有看错。当快速排序最优的时候是o（nlgn），而此时显然退化到了o（n^2）的级别。这是为什么？</p><p>还记得上面我写的快排的子过程么，考虑到了e&gt;v,e&lt;v，而e=v的情况没有考虑对吧。看了代码理解了的同学应该清楚，其实我是把等于v这种情况包含进了大于v的情况里面了，那么会出现什么问题？<strong>不管是当条件是大于等于还是小于等于v，当数组中重复元素非常多的时候，等于v的元素太多，那么就将数组分成了极度不平衡的两个部分，因为等于v的部分总是集中在数组的某一边。</strong></p><p>那么一种优化的方式便是进行<strong>双路快排</strong>。</p><p><strong>双路快排（我看百度百科上面的快排题解c语言版好像用的就是双路快排）</strong></p><hr><p><strong>和快排不同的是此时我们将小于v和大于v的元素放在数组的两端，那么我们将引用新的索引j的记录大于v的边界位置。如图：</strong><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/9.png" alt=""></p><hr><p><strong>i索引不断向后扫描，当i的元素小于v的时候继续向后扫描，直到碰到了某个元素大于等于v。j同理，直到碰到某个元素小于等于v。如图：</strong><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/10.png" alt=""></p><hr><p><strong>然后绿色的部分便归并到了一起，而此时只要交换i和j的位置就可以了，然后i++，j–就行了。如图：</strong><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/11.png" alt=""><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/12.png" alt=""></p><hr><p><strong>直到i和j遍历完毕，整个数组排序完成。</strong></p><p><strong>这种优化当它遇到重复元素的时候，也能近乎将他们平分开来。</strong></p><p><strong>双路快排代码如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">int partition(T arr[],int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">T v=arr[l];</span><br><span class="line">int i,j;</span><br><span class="line">i=l+1;j=r;</span><br><span class="line">while(true)</span><br><span class="line">&#123;</span><br><span class="line">while(arr[i]&lt;v&amp;&amp;i&lt;=r)i++;</span><br><span class="line">while(j&gt;=l+1&amp;&amp;arr[j]&gt;v)j--;</span><br><span class="line"></span><br><span class="line">if(i&gt;j)break;</span><br><span class="line">swap(arr[i],arr[j]);</span><br><span class="line">i++;</span><br><span class="line">j--;</span><br><span class="line"> &#125; </span><br><span class="line"> swap(arr[l],arr[j]);</span><br><span class="line"> </span><br><span class="line">return j;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void __quicksort2(T arr[],int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">if(l&gt;=r)</span><br><span class="line">return ;</span><br><span class="line"></span><br><span class="line">int p=partition(arr,l,r);</span><br><span class="line">__quicksort2(arr,l,p-1);</span><br><span class="line">__quicksort2(arr,p+1,r);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void quicksort(T arr[],int n)</span><br><span class="line">&#123;</span><br><span class="line">__quicksort2(arr,0,n-1);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int arr[100],n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">cin&gt;&gt;arr[i];</span><br><span class="line"></span><br><span class="line">quicksort(arr,n);</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">cout&lt;&lt;arr[i]&lt;&lt;&quot; &quot;;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>当然除了快排和双路快排，还有一个更加经典的优化，我们叫它<strong>三路快排</strong>。</p><p><strong>三路快排</strong></p><p><strong>双路快排将整个数组分成了小于v，大于v的两部分，而三路快排则是将数组分成了小于v，等于v，大于v的三个部分，当递归处理的时候，遇到等于v的元素直接不用管，只需要处理小于v，大于v的元素就好了。某一时刻的中间过程如下图：</strong><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/13.png" alt=""></p><hr><p><strong>当元素e等于v的时候直接纳入绿色区域之内，然后i++处理下一个元素。如图：</strong><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/14.png" alt=""></p><hr><p><strong>当元素e小于v的时候，只需要将元素e与等于e的第一个元素交换就行了，这和刚开始讲的快速排序方法类似。同理，当大于v的时候执行相似的操作。如图：</strong><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/15.png" alt=""><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/16.png" alt=""></p><hr><p><strong>当全部元素处理完之后，数组便成了这个样子：</strong><br><img src="/2018/10/18/快速排序-详解（快速排序-双路快排-三路快排）/17.png" alt=""></p><hr><p><strong>三路快排的代码如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void __quicksort3(T arr[],int l,int r)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">if(l&gt;=r)</span><br><span class="line">return ;</span><br><span class="line"></span><br><span class="line">T v=arr[l];</span><br><span class="line">int lt=l;</span><br><span class="line">int gt=r+1;</span><br><span class="line">int i=l+1;</span><br><span class="line">while(i&lt;gt)</span><br><span class="line">&#123;</span><br><span class="line">if(arr[i]&lt;v)</span><br><span class="line">&#123;swap(arr[i],arr[lt+1]);</span><br><span class="line">lt++;</span><br><span class="line">i++;&#125;</span><br><span class="line"></span><br><span class="line">else if(arr[i]&gt;v)</span><br><span class="line">&#123;</span><br><span class="line">swap(arr[i],arr[gt-1]);</span><br><span class="line">gt--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">swap(arr[l],arr[lt]);</span><br><span class="line"> __quicksort3(arr,l,lt-1);</span><br><span class="line"> __quicksort3(arr,gt,r);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void quicksort3(T arr[],int n)</span><br><span class="line">&#123;</span><br><span class="line">__quicksort3(arr,0,n-1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a[100],n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line"></span><br><span class="line">quicksort3(a,n);</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;快速排序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;快速排序可以说是20世纪最伟大的算法之一了。相信都有所耳闻，它的速度也正如它的名字那样，是一个非常快的算法了。当然它也后期经过了不断的改进和优化，才被公认为是一个值得信任的非常优秀的算法。&lt;br&gt;&lt;strong&gt;c+
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>归并排序 详解</title>
    <link href="http://yoursite.com/2018/10/18/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F-%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/10/18/归并排序-详解/</id>
    <published>2018-10-18T03:07:19.000Z</published>
    <updated>2018-10-21T03:17:53.800Z</updated>
    
    <content type="html"><![CDATA[<p><strong>算法复杂度</strong></p><p>也许有很多同学说，原来也学过很多O（n^2）或者O（n^3）的排序算法，有的可能优化一下能到O（n）的时间复杂度，但是在计算机中都是很快的执行完了，没有看出来算法优化的步骤，那么我想说有可能是你当时使用的测试用例太小了，我们可以简单的做一下比较：<br><img src="/2018/10/18/归并排序-详解/1.png" alt=""></p><p>当数据量很大的时候 nlogn的优势将会比n^2 越来越大，当n=10^5的时候，nlogn 的算法要比n^2 的算法快6000倍，那么6000倍是什么概念呢，就是如果我们要处理一个数据集，用nlogn的算法要处理一天的话，用n^2的算法将要处理6020天。这就基本相当于是15年。一个优化改进的算法可能比一个比一个笨的算法速度快了许多，这就是为什么我们要学习算法。</p><p><strong>核心思想：分治。</strong></p><p><strong>下面我们来看归并排序的思路（先讲思路再来具体讲归并的细节）：</strong></p><hr><p><strong>归并排序（Merge Sort）</strong><br><img src="/2018/10/18/归并排序-详解/2.png" alt=""></p><hr><p><strong>当我们要排序这样一个数组的时候，归并排序法首先将这个数组分成一半。如图：</strong><br><img src="/2018/10/18/归并排序-详解/3.png" alt=""></p><hr><p><strong>然后想办法把左边的数组给排序，右边的数组给排序，之后呢再将它们归并起来。当然了当我们对左边的数组和右边的素组进行排序的时候，再分别将左边的数组和右边的数组分成一半，然后对每一个部分先排序，再归并。如图：</strong><br><img src="/2018/10/18/归并排序-详解/4.png" alt=""></p><hr><p><strong>对于上面的每一个部分呢，我们依然是先将他们分半，再归并，如图：</strong><br><img src="/2018/10/18/归并排序-详解/5.png" alt=""></p><hr><p><strong>分到一定细度的时候，每一个部分就只有一个元素了，那么我们此时不用排序，对他们进行一次简单的归并就好了。如图：</strong><br><img src="/2018/10/18/归并排序-详解/6.png" alt=""></p><hr><p><strong>归并到上一个层级之后继续归并，归并到更高的层级，如图：</strong><br><img src="/2018/10/18/归并排序-详解/7.png" alt=""></p><hr><p><strong>直至最后归并完成。</strong><br><img src="/2018/10/18/归并排序-详解/8.png" alt=""></p><hr><p><strong>那么如何归并呢？我们是否可以用O（n）的算法将两个数组归并到一起形成一个数组呢？如果可以的话，我们将可以用递归的过程来实现整个归并。这是你想起来很简单但是操作起来并不是那么简单的问题。</strong></p><p><strong>归并细节：</strong></p><p>比如有两个已经排序好的数组，如何将他归并成一个数组？</p><p><strong>我们可以开辟一个临时数组来辅助我们的归并。也就是说他比我们插入排序也好，选择排序也好多使用了存储的空间，也就是说他需要o（n）的额外空间来完成这个排序。只不过现在计算机中时间的效率要比空间的效率重要的多。无论是内存也好还是硬盘也好可以存储的数据越来越多，所以设计一个算法，时间复杂度是要优先考虑的。</strong></p><hr><p><strong>整体来讲我们要使用三个索引来在数组内进行追踪。</strong><br><img src="/2018/10/18/归并排序-详解/9.png" alt=""></p><hr><p><strong>蓝色的箭头表示最终选择的位置，而红色的箭头表示两个数组当前要比较的元素，比如当前是2与1比较，1比2小，所以1放到蓝色的箭头中，蓝色的箭头后移，1的箭头后移。</strong><br><img src="/2018/10/18/归并排序-详解/10.png" alt=""></p><hr><p><strong>然后2与4比较，2比4小那么2到蓝色的箭头中，蓝色箭头后移，2后移，继续比较…….</strong><br><img src="/2018/10/18/归并排序-详解/11.png" alt=""></p><hr><p><strong>归并思路就是这样了，最后唯一需要注意的是那个先比较完的话，那么剩下的直接不需要比较，把后面的直接移上去就可以了，这个需要提前判定一下。</strong></p><p><strong>归并排序代码如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">void merge(int a[],int l,int r,int mid)</span><br><span class="line">&#123;</span><br><span class="line">  int aux[r-l+1],i,j,k;</span><br><span class="line">  </span><br><span class="line">  for(k=l;k&lt;=r;k++)</span><br><span class="line">  aux[k-l]=a[k];</span><br><span class="line">  </span><br><span class="line">  i=l;</span><br><span class="line">  j=mid+1;</span><br><span class="line">  for(k=l;k&lt;=r;k++)</span><br><span class="line">  &#123;</span><br><span class="line">  if(i&gt;mid)</span><br><span class="line">  &#123;</span><br><span class="line">  a[k]=aux[j-l];</span><br><span class="line">  j++;</span><br><span class="line">  &#125;</span><br><span class="line">else if(j&gt;r)</span><br><span class="line">&#123;</span><br><span class="line">a[k]=aux[i-l];</span><br><span class="line">i++;</span><br><span class="line">  &#125;</span><br><span class="line">else if(aux[i-l]&gt;aux[j-l])</span><br><span class="line">&#123;</span><br><span class="line">a[k]=aux[j-l];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">a[k]=aux[i-l];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void merge_sort(int a[],int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">    if(l&gt;=r)</span><br><span class="line">return ;</span><br><span class="line"></span><br><span class="line">int mid=(l+r)/2;</span><br><span class="line"></span><br><span class="line">merge_sort(a,l,mid);</span><br><span class="line">merge_sort(a,mid+1,r);</span><br><span class="line">merge(a,l,r,mid);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">void mergesort(int a[],int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">merge_sort(a,l,r-1);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a[105],n,i;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line"></span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line"></span><br><span class="line">mergesort(a,0,n);</span><br><span class="line"></span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">printf(&quot;%d &quot;,a[i]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;算法复杂度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也许有很多同学说，原来也学过很多O（n^2）或者O（n^3）的排序算法，有的可能优化一下能到O（n）的时间复杂度，但是在计算机中都是很快的执行完了，没有看出来算法优化的步骤，那么我想说有可能是你当时使用的测试用例太
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
